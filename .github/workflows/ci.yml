name: CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  # Check code formatting
  format:
    name: Format Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        run: rustup show

      - name: Check formatting
        run: cargo fmt --all -- --check

  # Lint with clippy
  clippy:
    name: Clippy Lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        run: rustup show

      - name: Cache cargo
        uses: actions/cache@v4
        with:
          path: ~/.cargo
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Cache cargo build
        uses: actions/cache@v4
        with:
          path: target
          key: ${{ runner.os }}-cargo-build-clippy-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-build-

      - name: Run clippy
        run: cargo clippy --bin nusense-rs --all-features -- -D warnings

  # Build the project
  build:
    name: Build
    runs-on: ubuntu-latest
    strategy:
      matrix:
        features: [default, debug, ""]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        run: rustup show

      - name: Cache cargo
        uses: actions/cache@v4
        with:
          path: ~/.cargo
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Cache cargo build
        uses: actions/cache@v4
        with:
          path: target
          key: ${{ runner.os }}-cargo-build-${{ matrix.features }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-build-

      - name: Build (no features)
        if: matrix.features == ''
        run: cargo build --release --no-default-features

      - name: Build (with features)
        if: matrix.features != ''
        run: cargo build --release --features ${{ matrix.features }}

      - name: Build binary
        run: cargo build --bin nusense-rs --release ${{ matrix.features != '' && format('--features {0}', matrix.features) || '--no-default-features' }}

  # Check for common issues
  check:
    name: Cargo Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        run: rustup show

      - name: Cache cargo
        uses: actions/cache@v4
        with:
          path: ~/.cargo
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Cache cargo build
        uses: actions/cache@v4
        with:
          path: target
          key: ${{ runner.os }}-cargo-build-check-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-build-

      - name: Check binary
        run: cargo check --bin nusense-rs --all-features

  # Security audit
  audit:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        run: rustup show

      - name: Cache cargo
        uses: actions/cache@v4
        with:
          path: ~/.cargo
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Install cargo-audit
        run: |
          if ! command -v cargo-audit &> /dev/null; then
            cargo install --locked cargo-audit
          fi

      - name: Run security audit
        run: cargo audit

  # Check for unused dependencies
  machete:
    name: Unused Dependencies
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        run: rustup show

      - name: Cache cargo
        uses: actions/cache@v4
        with:
          path: ~/.cargo
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Install cargo-machete
        run: |
          if ! command -v cargo-machete &> /dev/null; then
            cargo install --locked cargo-machete
          fi

      - name: Check for unused dependencies
        run: cargo machete

  # Final status check
  ci-success:
    name: CI Success
    if: always()
    needs: [format, clippy, build, check, audit, machete]
    runs-on: ubuntu-latest
    steps:
      - name: Check all jobs succeeded
        if: |
          needs.format.result != 'success' ||
          needs.clippy.result != 'success' ||
          needs.build.result != 'success' ||
          needs.check.result != 'success' ||
          needs.audit.result != 'success' ||
          needs.machete.result != 'success'
        run: exit 1

      - name: CI passed
        run: echo "All CI jobs passed successfully!"
